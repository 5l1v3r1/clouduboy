"use strict";

let game = new MicroCanvas();

let rjs, rjsLogo, dino, dinoLegs, dinoKaput, clouds, cactus;
let sfxBling, sfxPlop, sfxBoing, sfxBust;

game.setup(function(mctx) {
  rjs = mctx.loadGraphics(
    `PROGMEM const unsigned char rjs[] = { /*77x15*/
       0xfe, 0x1, 0xfe, 0x2, 0x85, 0x85, 0x5, 0xc5, 0xb9, 0xc2, 0x3c, 0x0, 0x0, 0x0,
       0xfe, 0x1, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x1, 0xfe, 0x0, 0x0, 0x0, 0x0,
       0xfe, 0x1, 0x7e, 0x40, 0x40, 0x40, 0x40, 0x80, 0xfe, 0x1, 0xfe, 0x0, 0x0, 0x0,
       0x0, 0xfe, 0x1, 0xfe, 0x2, 0x85, 0x85, 0x5, 0xc5, 0xbb, 0xc6, 0x7c, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0xfe, 0x1, 0xfe, 0x0, 0x0, 0x0, 0x1c, 0x26, 0x5a, 0x97
       0xa0, 0xa3, 0xa5, 0x45, 0xcb, 0x8a, 0xc, 0x3f, 0x40, 0x3f, 0x1, 0x2, 0x5,
       0xb, 0x16, 0x2c, 0x58, 0x30, 0x0, 0x0, 0x0, 0x1, 0x1b, 0x29, 0x28, 0x50, 0x50,
       0x50, 0x28, 0x27, 0x18, 0x7, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x40, 0x3f, 0x1,
       0x1, 0x1, 0x1, 0x0, 0x3f, 0x40, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x40, 0x3f,
       0x1, 0x2, 0x5, 0xb, 0x16, 0x2c, 0x58, 0x30, 0x0, 0x0, 0x20, 0x50, 0x50, 0x28,
       0x27, 0x10, 0xf, 0x0, 0x0, 0x0, 0xc, 0x14, 0x2c, 0x28, 0x50, 0x50, 0x60,
       0x1b, 0x34, 0x39, 0xf };`
  );

  rjsLogo = mctx.loadGraphics(
    `PROGMEM const unsigned char rjs_logo[] = { /*39x36*/
      0x0, 0x0, 0x0, 0x0, 0xc0, 0x60, 0xb0, 0x50, 0x28, 0x2c, 0x14, 0x8a, 0x8a,
      0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5,
      0xa5, 0x8a, 0x8a, 0x14, 0x2c, 0x28, 0x50, 0xb0, 0x60, 0xc0, 0x0, 0x0,
      0x0, 0x0, 0xc0, 0x38, 0xc6, 0x3b, 0x4, 0x3, 0x0, 0x0, 0x0, 0x0, 0xc1,
      0x62, 0x32, 0xfa, 0xa, 0xfa, 0x32, 0x62, 0x42, 0x2, 0x42, 0x62, 0x32, 0xfa,
      0xa, 0xfa, 0x32, 0x62, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x3, 0x4, 0x3b, 0xc6, 0x38,
      0xc0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x83, 0x70,
      0x8f, 0x70, 0xd, 0x5, 0x7d, 0x7d, 0x5, 0x7d, 0x7d, 0x5, 0xd, 0x70, 0x8f,
      0x70, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0,
      0x7, 0x18, 0x27, 0x5c, 0xb0, 0xe0, 0x0, 0xc0, 0x30, 0xce, 0x31, 0xe, 0x1,
      0x0, 0x1, 0x1, 0xff, 0xff, 0x1, 0xff, 0xff, 0x1, 0x1, 0x0, 0x1, 0xe, 0x31,
      0xce, 0x30, 0xc0, 0x0, 0xe0, 0xb0, 0x5c, 0x27, 0x18, 0x7, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x9, 0x6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x9, 0xe,
      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };`
  );

  dino = mctx.loadGraphics(
    `PROGMEM const unsigned char dino[] = { /*20x24*/
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0xfe, 0xff, 0xfb, 0xff, 0xff, 0xbf, 0xbf, 0xbf, 0x3f, 0x3e,
      0x7e, 0xf8, 0xf0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff,
      0xff, 0xff, 0xff, 0x7f, 0x4,  0xc,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x1,  0x3,  0x7,  0x7f, 0x5f, 0xf,  0x7,  0xf,
      0x7f, 0x43, 0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0
    };`
  );

  dinoLegs = mctx.loadGraphics(
    `PROGMEM const unsigned char dino_legs[] = { /*20x5x2*/
      0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x0b, 0x01, 0x01, 0x03,
      0x1f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

      0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x17, 0x03, 0x01, 0x03,
      0x0f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };`
  );

  dinoKaput = mctx.loadGraphics(
    `PROGMEM const unsigned char dino_tumble[] = { /* 30x18 */
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x7e, 0xf8, 0xf0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8,
      0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0xc0,
      0xf0, 0xa8, 0xd8, 0xa8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0,
      0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
      0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01,
      0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01
    };`
  );

  clouds = mctx.loadGraphics(
    `PROGMEM const unsigned char clouds[] = { /* 20x16x1 */
      0x1c, 0x22, 0x22, 0x22, 0x24, 0x10, 0x12, 0x2a, 0x21, 0x41,
      0x41, 0x41, 0x42, 0x4a, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };`
  );

  cactus = mctx.loadGraphics(
    `PROGMEM const unsigned char cactus[] = { /* 16x24 */
      0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xfe,
      0x00, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
      0xfe, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x03, 0x03, 0x83, 0xff, 0xff, 0xff, 0xff,
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };`
  );

  sfxBling = mctx.loadTune(
    `const byte PROGMEM score [] = {
         0x90, 71, 0,116, 0x80,
         0x90, 76, 1,222, 0x80,
         0xf0
    };`
  );

  sfxPlop = mctx.loadTune(
    `const byte PROGMEM score [] = {
         0x90, 47, 0, 33, 0x80,
         0x90, 41, 0, 50, 0x80,
         0xf0
    };`
  );

  sfxBoing = mctx.loadTune(
    `const byte PROGMEM score [] = {
         0x90, 57, 0, 33, 0x80,
         0x90, 69, 0, 83, 0x80,
         0xf0
    };`
  );

  sfxBust = mctx.loadTune(
    `const byte PROGMEM score [] = {
         0x90, 47, 0, 50, 0x80,
         0x90, 41, 0, 99, 0x80,
         0xf0
    };`
  );

  //mctx.playbackRate = 1/3;
  mctx.loop(loop);
});



let intro = 1;
let _running = null;


function loop() {
  if (intro) {
     if (!_running) _running = gameIntro();

     if (game.buttonPressed("enter")) return gameStart();

     if (game._delay && game._delay > 0) {
        --game._delay;
     } else {
       let c = _running.next();

       if (c.done) {
         _running = null;

         return gameStart();
       } else {
         game._delay = c.value -1;
       }
     }

     return;
  }

  // Clear display
  game.clear();

  // Flash active controls
  if (game.everyXFrame(5)) {
    if (game.buttonPressed("left")) {
      game.drawText("<", 80,50);
    }
    if (game.buttonPressed("right")) {
      game.drawText(">", 93,50);
    }
    if (game.buttonPressed("up")) {
      game.drawText("/\\", 84,45);
    }
    if (game.buttonPressed("down")) {
      game.drawText("\\/", 84,55);
    }
      if (game.buttonPressed("space")) {
      game.drawText("A", 102,50);
    }
    if (game.buttonPressed("enter")) {
      game.drawText("B", 110,50);
    }
  }


  gamePlay();
}


function *gameIntro() {

  //for(int i = -8; i < 39; i = i + 2)
  for (let y = -8;  y <= 38; y += 2) {
    game.clear();
    game.drawImage(rjsLogo, 44, 0 );

    game.drawImage(rjs, 25, y );
    yield 1; // essentially delay(16);
  }

  game.drawText("presents", 42, 55);

  //arduboy.tunes.tone(987, 120);
  //delay(120);
  //arduboy.tunes.tone(1318, 400);
  sfxBling.play();


  // Flash the RGB led on the Arduboy or the screen in the browser to a purple color!
  game.custom({
    canvas: `document.body.style.backgroundColor='rgb(96, 0, 128)'`,
    arduboy: `setRGBled(96, 0, 128)`,
  });

  yield 6; // essentially delay(6*16);

  game.custom({
    canvas: `document.body.style.backgroundColor=''`,
    arduboy: `setRGBled(0, 0, 0)`,
  });

  yield 60;


  let y = 12;
    //arduboy.drawBitmap(54-2, y-1,    dino,   20,18, BLACK);
    //arduboy.drawBitmap(54+1, y+1,    dino,   20,18, BLACK);
    game.eraseImage(dino, 54-2, y-1);
    game.eraseImage(dino, 54+1, y+1);

  //for (int i=0; i<12; ++i) {
  for (let frame = 0; frame <36; ++frame ) {
    let rx = Math.floor(Math.random()*(2+1)) -1; // = random(0,2)-1;
    let ry = Math.floor(Math.random()*(2+1)) -1;
    let noise = 0;// (frame%6>2 ? frame : -frame )/6;

    if (frame%3 === 0) {
      game.drawImage(dino, rx+ 54, ry+ y);
    } else {
      game.eraseImage(dino, rx+ 54+noise, ry+ y+noise);
    }
    //arduboy.drawBitmap(rx+ 54+(i%2?i:-i)/2, ry+ y+(i%2?i:-i)/2,    dino_top,   20,18, BLACK);

    yield 1;
  }

  //for(; y < 41; y += 1+y/10)
  while ( y < 40 ) {
    //y += (frame + (frame>6?frame-6:0) + (frame>12?frame-12:0))|0;
    y += 1 + y/10;
    if (y > 40) y = 40;

    game.clear();
    game.drawImage(rjsLogo, 44, 0 );
    game.drawImage(rjs, 25, 38 );

    game.drawText("pr   nts", 42, 55);
    game.drawText("ese", 54, 55 + (y>32 ? y-32 : 0));

    game.eraseImage(dino, 54-2, y-1);
    game.eraseImage(dino, 54+1, y+1);

    game.drawImage(dino, 54, y);

    yield 1;
  }

  //      arduboy.tunes.tone(246, 20);
  //      delay(20);
  //      arduboy.tunes.tone(174, 40);
  //new ArduboyScore("0x90, 47, 0, 33, 0x80, 0x90, 41, 0, 50, 0x80, 0xf0").play();
  sfxPlop.play();

  yield 120;


  //for (int i = 0; i < 64; ++i) {
  for (let i = 0; i < 64; ++i) {
    let z = i<54 ? i : 54;

    game.eraseImage(dino, 54-z+1, y);

    //arduboy.drawLine(0, i<32 ? i*2 : 127-i*2, 127,i<32 ? i*2 : 127-i*2, BLACK);
    game.clearRect(0, i<32 ? i*2 : 127-i*2, 128, 1);

    game.drawImage(dino, 54-z, y);

    yield 1;
  }

  yield 10;
}



let d_jump_t = 0;
let d_jump = 0;

let d_tumble_t = false;

let d_run = true;

function gameStart() {
  intro = false;

  d_tumble_t = false;
  d_run = true;

  d_jump_t = 0;
  d_jump = 0;

  game.d = 0;
  game.ox = 130;
}

function gamePlay() {
  if (!d_run && game.buttonPressed("enter")) {
    gameStart();
  };

  // increase distance whilst running
  game.d = game.d||0;
  game.delta = game.delta||0;
  if (d_run && (++game.delta > 4)) {
    game.delta = 0; ++game.d;
  }

  // obstacles
  game.ox = game.ox||130;
  if (d_run) {
    game.ox -= (game.frameCount%2)*(game.d/100|0) + 2;
    if (game.ox < -15) game.ox += 140 + Math.floor(0 + Math.random()*(60-0+1)); // random(0,60)
  }


  // jump!
  if (d_run && !d_jump_t && (game.buttonPressed("space") || game.buttonPressed("up"))) {
    d_jump_t = 1;
    d_jump=5;

    //arduboy.tunes.tone(440, 40);
    sfxBoing.play();

    //console.log(d_jump_t,d_jump);
  } else if (d_jump_t) {
    //if (d_jump_t == 3) arduboy.tunes.tone(880, 80);

    ++d_jump_t;

    if (d_jump_t<6) {
      d_jump +=6;
    } else if (d_jump_t<9) {
      d_jump +=2;
    } else if (d_jump_t<13) {
      d_jump +=1;
    } else if (d_jump_t == 16 || d_jump_t == 18) {
      d_jump +=1;
    } else if (d_jump_t == 20 || d_jump_t == 22) {
      d_jump -=1;
    } else if (d_jump_t>38) {
      d_jump = 0;
      d_jump_t = 0;
    } else if (d_jump_t>32) {
      d_jump -=6;
    } else if (d_jump_t>29) {
      d_jump -=2;
    } else if (d_jump_t>25) {
      d_jump -=1;
    }
    //console.log(d_jump_t,d_jump);
  }

  let cloud_1_y = 5;
  let dy = 40 - d_jump;




  // parallax clouds
  game.drawImage(clouds[0], 130 -(game.d%150),cloud_1_y);

  if (game.d%128 == 0) {
    cloud_1_y = Math.floor(0 + Math.random()*(10-0+1));// random(0,10);
  }

  // terrain
  if (d_jump > 4) {
    game.fillRect( 0,60, 128,1);
  } else {
    game.fillRect( 0,60, 4,1);
    game.fillRect(12,60, 116,1); // => drawLine(x,y, x+w-1, y+h-1, WHITE )
    //arduboy.drawLine(12,60,127,60,WHITE);
  }

  // obstacles
  game.drawImage(cactus, game.ox,40);



  //arduboy.drawBitmap(0,dy,dino_top,20,18,WHITE);
  if (d_tumble_t) {
    game.drawImage(dinoKaput, 0,dy);
  } else {
    game.drawImage(dino, 0,0, 20,18, 0,dy ,20,18);

    // Legs phases
    let legPhase = ((game.frameCount % 8) / 4)|0;

    // Run, Dino, Run!
    if (d_run && !d_jump) {
      //arduboy.drawBitmap(0,dy+18,dino_leg_2,20,5,WHITE);
      game.drawImage(dinoLegs[legPhase], 0,dy+18);
    } else {
      //arduboy.drawBitmap(0,dy+18,dino_leg_0,20,5,WHITE);
      game.drawImage(dino, 0,18, 20,5, 0,dy+18, 20,5);
    }
  }

  // hud
  //arduboy.setCursor(0, 0);
  //sprintf(text,"DIST: %d",d);
  game.drawText("DIST: "+game.d, 0,0);



  // hit detection
  if (!d_tumble_t && game.detectCollision(dino, 0,dy, cactus, game.ox,40)) {
    d_tumble_t = 1;
    sfxBust.play();
  }

  if (d_tumble_t) {
    //if (d_tumble_t == 1) {
    //  arduboy.tunes.tone(246, 80);
    //} else if (d_tumble_t == 6) {
    //  arduboy.tunes.tone(174, 200);
    //}

    ++d_tumble_t;
    if (d_jump > -4) {
      d_jump -= 1;
      game.ox -= 1;
    } else {
      d_run = 0;
    }
  }
}

console.log("MicroCanvas: Animate Demo with Generators");
