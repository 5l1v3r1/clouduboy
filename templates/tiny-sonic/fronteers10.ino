#include <TinyScreen.h>
#include <SPI.h>
#include <Wire.h>

#include <TinyArcade.h>

TinyScreen display = TinyScreen(TinyScreenPlus);

// 16-bit color sprite
#define GFX_SONIC16_MASKCOLOR 0x0000

#define GFX_SONIC16_W 16
#define GFX_SONIC16_H 16

const uint16_t GFX_SONIC16[16 * 16] = {
/*16x16@16b*/   0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0x555f, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xa800, 0x52b5, 0x555f, 0xfaaa, 0xfaaa, 0xffff, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0xfaaa, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0x52b5, 0x52b5, 0xffff, 0xffff, 0x0000, 0x52b5, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x52b5, 0x52b5, 0x555f, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x555f, 0x555f, 0x555f, 0x52b5, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x555f, 0x52b5, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x52b5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

//JSON.stringify(Array(90).fill(0).map((e,i)=>i).map(n => Math.floor(Math.sin(Math.PI*n/45)*10)))
const int sinetable[] = {
  0,0,1,2,2,3,4,4,5,5,6,6,7,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,7,7,6,6,5,5,4,4,3,2,2,1,
  0,0,-1,-2,-3,-3,-4,-5,-5,-6,-6,-7,-7,-8,-8,-9,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
  -9,-9,-9,-8,-8,-7,-7,-6,-6,-5,-5,-4,-3,-3,-2,-1
};

#define screenWidth 96
#define screenHeight 64

#define w screenWidth
#define h screenHeight

//uint8_t buffer8[screenWidth * screenHeight];
uint8_t buffer[screenWidth * screenHeight * 2];


//pink FEC9D9 - 254,201,217
//green 00D864 - 0,216,100
//lightgreen 9FEBAB - 159,235,171


void setup() {
  arcadeInit();
  Wire.begin();

  display.begin();
  display.setFlip(0);
  display.setBrightness(8);
  display.setBitDepth(1);
  //display.setBitDepth(0);
}

uint8_t phaseCounter = 0;

void loop() {

  // main loop
  while (1)
  {
    phaseCounter++;
    if (phaseCounter >= 90) phaseCounter = 0;
    //if (checkButton(TAButton1) {} //+TAButton2
    //if (checkJoystick(TAJoystickUp)) {} //+TAJoystickDown/TAJoystickLeft/TAJoystickRight

    // Display graphics
    const uint16_t *gfx;

    for (int d = 10; d > 0; d--) {
      // phase += Math.PI/45
      // Math.sin(phase)

      gfx = GFX_SONIC16;

      for (int y = 32-8; y < 32+8; y++) {
        for (int x = 48-8; x < 48+8; x++) {
          uint16_t color = *gfx++;

          if (color != GFX_SONIC16_MASKCOLOR) {
            buffer[(x + ((y + 2*d - sinetable[(phaseCounter+d)%90]) * w) +2*d) * 2] = color >> 8;
            buffer[(x + ((y + 2*d - sinetable[(phaseCounter+d)%90]) * w) +2*d) * 2 + 1] = color;
          }
        }
      }
    }

    // write double-buffer contents
    display.goTo(0, 0);
    display.startData();
    display.writeBuffer(buffer, w * h * 2);
    display.endTransfer();


    // clear buffer
    for (int i = 0; i < w * h * 2; i++) {
      buffer[i++] = 0;
      buffer[i] = 0;
    }


    //performance timing / FPS
    //oldTime = time;
    //time = millis();
    //float frameTime = (time - oldTime) / 1000.0; //frametime is the time this frame has taken, in seconds
    //SerialUSB.println(1.0 / frameTime); //FPS counter
  }
}
