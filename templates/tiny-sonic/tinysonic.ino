#include <TinyScreen.h>
#include <SPI.h>
#include <Wire.h>

#include <TinyArcade.h>

TinyScreen display = TinyScreen(TinyScreenPlus);

PROGMEM unsigned char sonic8[16 * 16] = {
/*16x16@8b*/ 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xe9, 0xe9, 0xe9, 0xa0, 0xe9, 0xa0, 0xa0, 0xa0, 0xa0, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xe9, 0xa0, 0x4a, 0xa0, 0xe9, 0xe9, 0xe9, 0xa0, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0x57, 0x4a, 0xa0, 0xe9, 0xe9, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0x4a, 0x57, 0x4a, 0xa0, 0xe9, 0xe9, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xe9, 0xa0, 0x4a, 0x57, 0xe9, 0xe9, 0xff, 0xe9, 0xe9, 0xe9, 0xa0, 0x00, 0x00, 0xa0, 0xa0, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xb6, 0xff, 0xff, 0xe9, 0xe9, 0xa0, 0x00, 0xa0, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xe9, 0xb6, 0xff, 0xff, 0x00, 0xe9, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xe9, 0xe9, 0xe9, 0xb6, 0xff, 0xff, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xe9, 0xe9, 0xe9, 0xb6, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xe9, 0x4a, 0x4a, 0xff, 0xff, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xe9, 0xa0, 0xa0, 0xa0, 0x4a, 0x57, 0x57, 0x57, 0x4a, 0x4a, 0x57, 0x00, 0x00, 0x00, 0xa0, 0xe9, 0xa0, 0xa0, 0xa0, 0xa0, 0x4a, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x4a, 0x00, 0x00, 0xa0, 0xe9, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x4a, 0x57, 0x57, 0x57, 0x57, 0x4a, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x4a, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint16_t sonic16[16 * 16] = {
/*16x16@16b*/ 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0x555f, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x52b5, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xa800, 0x52b5, 0x555f, 0xfaaa, 0xfaaa, 0xffff, 0xfaaa, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0x0000, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0xfaaa, 0xfaaa, 0xa800, 0x0000, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0xfaaa, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0xfaaa, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0xfaaa, 0xfaaa, 0xad55, 0xffff, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xfaaa, 0x52b5, 0x52b5, 0xffff, 0xffff, 0x0000, 0x52b5, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x52b5, 0x52b5, 0x555f, 0x0000, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x555f, 0x555f, 0x555f, 0x52b5, 0x0000, 0x0000, 0xa800, 0xfaaa, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x555f, 0x555f, 0x555f, 0x555f, 0x52b5, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0x52b5, 0x52b5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xa800, 0xa800, 0xa800, 0xa800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

#define screenWidth 96
#define screenHeight 64

#define w screenWidth
#define h screenHeight

//uint8_t buffer8[screenWidth * screenHeight];
uint8_t buffer[screenWidth * screenHeight * 2];



void setup() {
  arcadeInit();
  Wire.begin();

  display.begin();
  display.setFlip(0);
  display.setBrightness(8);
  display.setBitDepth(1);
  //display.setBitDepth(0);
}



void loop() {

  // main loop
  while (1)
  {
    //if (checkButton(TAButton1) {} //+TAButton2
    //if (checkJoystick(TAJoystickUp)) {} //+TAJoystickDown/TAJoystickLeft/TAJoystickRight

    // Display graphics
    const uint16_t *gfx = sonic16;
    for (int y = 32-8; y < 32+8; y++) {
      for (int x = 48-8; x < 48+8; x++) {
        uint16_t color = *gfx++;

        if (color != 0x0000) {
          buffer[(x + (y * w)) * 2] = color >> 8;
          buffer[(x + (y * w)) * 2 + 1] = color;
        }
      }
    }

    // write double-buffer contents
    display.goTo(0, 0);
    display.startData();
    display.writeBuffer(buffer, w * h * 2);
    display.endTransfer();


    // clear buffer
    for (int i = 0; i < w * h * 2; i++) {
      buffer[i++] = 0;
      buffer[i] = 0;
    }


    //performance timing / FPS
    //oldTime = time;
    //time = millis();
    //float frameTime = (time - oldTime) / 1000.0; //frametime is the time this frame has taken, in seconds
    //SerialUSB.println(1.0 / frameTime); //FPS counter
  }
}


void drawBitmap8(){
  //set a background that matches
  display.drawRect(0,0,96,64,TSRectangleFilled,TS_8b_Blue);
  //let's set up for a bitmap at (40,30) that is 17 pixels wide and 12 pixels tall:
  //setX(x start, x end);//set OLED RAM to x start, wrap around at x end
  display.setX(40,40+17-1);
  //setY(y start, y end);//set OLED RAM to y start, wrap around at y end
  display.setY(30,30+12-1);
  //now start a data transfer
  display.startData();
  //writeBuffer(buffer,count);//optimized write of a large buffer of 8 bit data.
  display.writeBuffer(sonic8,16*16);
  display.endTransfer();
  delay(1000);

}
